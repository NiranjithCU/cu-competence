// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// next-auth schema
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  assesments    Assesment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// app schema

model Assesment {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  age      String?
  job      String?
  country  String?
  program  String?
  gender   String?
  semester String?
  answers  Answers[]
  feedback Feedback?
}

model Answers {
  id           Int         @id @default(autoincrement())
  assesment    Assesment?  @relation(fields: [assesmentId], references: [id])
  assesmentId  Int?
  area         Area?       @relation(fields: [areaId], references: [id])
  areaId       Int?
  competence   Competence? @relation(fields: [competenceId], references: [id])
  competenceId Int?
  theme        Theme?      @relation(fields: [themeId], references: [id])
  themeId      Int?
  choice       Choice?     @relation(fields: [choiceId], references: [id])
  choiceId     Int?
}

model Feedback {
  id          Int       @id @default(autoincrement())
  response    String?
  assesment   Assesment @relation(fields: [assesmentId], references: [id])
  assesmentId Int       @unique
}

model Area {
  id          Int          @id @default(autoincrement())
  name        String?
  competences Competence[]
  answers     Answers[]
}

model Competence {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  area        Area?     @relation(fields: [areaId], references: [id])
  areaId      Int?
  themes      Theme[]
  answers     Answers[]
}

model CompetenceLevel {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
}

model Theme {
  id           Int         @id @default(autoincrement())
  name         String?
  competence   Competence? @relation(fields: [competenceId], references: [id])
  competenceId Int?
  choices      Choice[]
  answers      Answers[]
}

model Choice {
  id      Int          @id @default(autoincrement())
  name    String?
  theme   Theme?       @relation(fields: [themeId], references: [id])
  themeId Int?
  level   ChoiceLevel? @relation(fields: [levelId], references: [id])
  levelId Int?
  answers Answers[]
}

model ChoiceLevel {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  choices     Choice[]
}
